// source: point.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.point.AbilityToMove', null, global);
goog.exportSymbol('proto.point.AbilityToMoveMessage', null, global);
goog.exportSymbol('proto.point.GenericSCIMessage', null, global);
goog.exportSymbol('proto.point.PointDegradedPosition', null, global);
goog.exportSymbol('proto.point.PointDegradedPositionMessage', null, global);
goog.exportSymbol('proto.point.PointMachineStateMessage', null, global);
goog.exportSymbol('proto.point.PointMachineStateMessage.AbilityToMove', null, global);
goog.exportSymbol('proto.point.PointMachineStateMessage.Crucial', null, global);
goog.exportSymbol('proto.point.PointMachineStateMessage.LastPointPosition', null, global);
goog.exportSymbol('proto.point.PointMachineStateMessage.Target', null, global);
goog.exportSymbol('proto.point.PointPosition', null, global);
goog.exportSymbol('proto.point.PointPositionMessage', null, global);
goog.exportSymbol('proto.point.PreventedPosition', null, global);
goog.exportSymbol('proto.point.SimulatedPositionMessage', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.point.AbilityToMoveMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.point.AbilityToMoveMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.point.AbilityToMoveMessage.displayName = 'proto.point.AbilityToMoveMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.point.GenericSCIMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.point.GenericSCIMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.point.GenericSCIMessage.displayName = 'proto.point.GenericSCIMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.point.SimulatedPositionMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.point.SimulatedPositionMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.point.SimulatedPositionMessage.displayName = 'proto.point.SimulatedPositionMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.point.PointPositionMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.point.PointPositionMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.point.PointPositionMessage.displayName = 'proto.point.PointPositionMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.point.PointDegradedPositionMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.point.PointDegradedPositionMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.point.PointDegradedPositionMessage.displayName = 'proto.point.PointDegradedPositionMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.point.PointMachineStateMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.point.PointMachineStateMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.point.PointMachineStateMessage.displayName = 'proto.point.PointMachineStateMessage';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.point.AbilityToMoveMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.point.AbilityToMoveMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.point.AbilityToMoveMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.point.AbilityToMoveMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    ability: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.point.AbilityToMoveMessage}
 */
proto.point.AbilityToMoveMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.point.AbilityToMoveMessage;
  return proto.point.AbilityToMoveMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.point.AbilityToMoveMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.point.AbilityToMoveMessage}
 */
proto.point.AbilityToMoveMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.point.AbilityToMove} */ (reader.readEnum());
      msg.setAbility(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.point.AbilityToMoveMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.point.AbilityToMoveMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.point.AbilityToMoveMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.point.AbilityToMoveMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAbility();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional AbilityToMove ability = 1;
 * @return {!proto.point.AbilityToMove}
 */
proto.point.AbilityToMoveMessage.prototype.getAbility = function() {
  return /** @type {!proto.point.AbilityToMove} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.point.AbilityToMove} value
 * @return {!proto.point.AbilityToMoveMessage} returns this
 */
proto.point.AbilityToMoveMessage.prototype.setAbility = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.point.GenericSCIMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.point.GenericSCIMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.point.GenericSCIMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.point.GenericSCIMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: msg.getMessage_asB64(),
    dataLength: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.point.GenericSCIMessage}
 */
proto.point.GenericSCIMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.point.GenericSCIMessage;
  return proto.point.GenericSCIMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.point.GenericSCIMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.point.GenericSCIMessage}
 */
proto.point.GenericSCIMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDataLength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.point.GenericSCIMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.point.GenericSCIMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.point.GenericSCIMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.point.GenericSCIMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getDataLength();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional bytes message = 1;
 * @return {string}
 */
proto.point.GenericSCIMessage.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes message = 1;
 * This is a type-conversion wrapper around `getMessage()`
 * @return {string}
 */
proto.point.GenericSCIMessage.prototype.getMessage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMessage()));
};


/**
 * optional bytes message = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMessage()`
 * @return {!Uint8Array}
 */
proto.point.GenericSCIMessage.prototype.getMessage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMessage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.point.GenericSCIMessage} returns this
 */
proto.point.GenericSCIMessage.prototype.setMessage = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int32 data_length = 2;
 * @return {number}
 */
proto.point.GenericSCIMessage.prototype.getDataLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.point.GenericSCIMessage} returns this
 */
proto.point.GenericSCIMessage.prototype.setDataLength = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.point.SimulatedPositionMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.point.SimulatedPositionMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.point.SimulatedPositionMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.point.SimulatedPositionMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: jspb.Message.getFieldWithDefault(msg, 1, 0),
    degradedposition: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.point.SimulatedPositionMessage}
 */
proto.point.SimulatedPositionMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.point.SimulatedPositionMessage;
  return proto.point.SimulatedPositionMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.point.SimulatedPositionMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.point.SimulatedPositionMessage}
 */
proto.point.SimulatedPositionMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.point.PreventedPosition} */ (reader.readEnum());
      msg.setPosition(value);
      break;
    case 2:
      var value = /** @type {!proto.point.PointDegradedPosition} */ (reader.readEnum());
      msg.setDegradedposition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.point.SimulatedPositionMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.point.SimulatedPositionMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.point.SimulatedPositionMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.point.SimulatedPositionMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDegradedposition();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional PreventedPosition position = 1;
 * @return {!proto.point.PreventedPosition}
 */
proto.point.SimulatedPositionMessage.prototype.getPosition = function() {
  return /** @type {!proto.point.PreventedPosition} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.point.PreventedPosition} value
 * @return {!proto.point.SimulatedPositionMessage} returns this
 */
proto.point.SimulatedPositionMessage.prototype.setPosition = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional PointDegradedPosition degradedPosition = 2;
 * @return {!proto.point.PointDegradedPosition}
 */
proto.point.SimulatedPositionMessage.prototype.getDegradedposition = function() {
  return /** @type {!proto.point.PointDegradedPosition} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.point.PointDegradedPosition} value
 * @return {!proto.point.SimulatedPositionMessage} returns this
 */
proto.point.SimulatedPositionMessage.prototype.setDegradedposition = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.point.PointPositionMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.point.PointPositionMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.point.PointPositionMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.point.PointPositionMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.point.PointPositionMessage}
 */
proto.point.PointPositionMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.point.PointPositionMessage;
  return proto.point.PointPositionMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.point.PointPositionMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.point.PointPositionMessage}
 */
proto.point.PointPositionMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.point.PointPosition} */ (reader.readEnum());
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.point.PointPositionMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.point.PointPositionMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.point.PointPositionMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.point.PointPositionMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional PointPosition position = 1;
 * @return {!proto.point.PointPosition}
 */
proto.point.PointPositionMessage.prototype.getPosition = function() {
  return /** @type {!proto.point.PointPosition} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.point.PointPosition} value
 * @return {!proto.point.PointPositionMessage} returns this
 */
proto.point.PointPositionMessage.prototype.setPosition = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.point.PointDegradedPositionMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.point.PointDegradedPositionMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.point.PointDegradedPositionMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.point.PointDegradedPositionMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.point.PointDegradedPositionMessage}
 */
proto.point.PointDegradedPositionMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.point.PointDegradedPositionMessage;
  return proto.point.PointDegradedPositionMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.point.PointDegradedPositionMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.point.PointDegradedPositionMessage}
 */
proto.point.PointDegradedPositionMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.point.PointDegradedPosition} */ (reader.readEnum());
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.point.PointDegradedPositionMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.point.PointDegradedPositionMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.point.PointDegradedPositionMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.point.PointDegradedPositionMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional PointDegradedPosition position = 1;
 * @return {!proto.point.PointDegradedPosition}
 */
proto.point.PointDegradedPositionMessage.prototype.getPosition = function() {
  return /** @type {!proto.point.PointDegradedPosition} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.point.PointDegradedPosition} value
 * @return {!proto.point.PointDegradedPositionMessage} returns this
 */
proto.point.PointDegradedPositionMessage.prototype.setPosition = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.point.PointMachineStateMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.point.PointMachineStateMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.point.PointMachineStateMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.point.PointMachineStateMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    pointposition: jspb.Message.getFieldWithDefault(msg, 1, 0),
    target: jspb.Message.getFieldWithDefault(msg, 2, 0),
    abilitytomove: jspb.Message.getFieldWithDefault(msg, 3, 0),
    lastpointposition: jspb.Message.getFieldWithDefault(msg, 4, 0),
    crucial: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.point.PointMachineStateMessage}
 */
proto.point.PointMachineStateMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.point.PointMachineStateMessage;
  return proto.point.PointMachineStateMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.point.PointMachineStateMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.point.PointMachineStateMessage}
 */
proto.point.PointMachineStateMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.point.PointPosition} */ (reader.readEnum());
      msg.setPointposition(value);
      break;
    case 2:
      var value = /** @type {!proto.point.PointMachineStateMessage.Target} */ (reader.readEnum());
      msg.setTarget(value);
      break;
    case 3:
      var value = /** @type {!proto.point.PointMachineStateMessage.AbilityToMove} */ (reader.readEnum());
      msg.setAbilitytomove(value);
      break;
    case 4:
      var value = /** @type {!proto.point.PointMachineStateMessage.LastPointPosition} */ (reader.readEnum());
      msg.setLastpointposition(value);
      break;
    case 5:
      var value = /** @type {!proto.point.PointMachineStateMessage.Crucial} */ (reader.readEnum());
      msg.setCrucial(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.point.PointMachineStateMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.point.PointMachineStateMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.point.PointMachineStateMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.point.PointMachineStateMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPointposition();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTarget();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getAbilitytomove();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getLastpointposition();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getCrucial();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.point.PointMachineStateMessage.Target = {
  TARGET_UNDEFINED: 0,
  TARGET_LEFT: 1,
  TARGET_RIGHT: 2,
  TARGET_NONE: 3
};

/**
 * @enum {number}
 */
proto.point.PointMachineStateMessage.AbilityToMove = {
  ABILITYTOMOVE_UNDEFINED: 0,
  ABILITYTOMOVE_ABLE: 1,
  ABILITYTOMOVE_UNABLE: 2
};

/**
 * @enum {number}
 */
proto.point.PointMachineStateMessage.LastPointPosition = {
  LASTPOINTPOSITION_UNDEFINED: 0,
  LASTPOINTPOSITION_NONE: 1
};

/**
 * @enum {number}
 */
proto.point.PointMachineStateMessage.Crucial = {
  CRUCIAL_UNDEFINED: 0,
  CRUCIAL_CRUCIAL: 1,
  CRUCIAL_NONCRUCIAL: 2
};

/**
 * optional PointPosition pointPosition = 1;
 * @return {!proto.point.PointPosition}
 */
proto.point.PointMachineStateMessage.prototype.getPointposition = function() {
  return /** @type {!proto.point.PointPosition} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.point.PointPosition} value
 * @return {!proto.point.PointMachineStateMessage} returns this
 */
proto.point.PointMachineStateMessage.prototype.setPointposition = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Target target = 2;
 * @return {!proto.point.PointMachineStateMessage.Target}
 */
proto.point.PointMachineStateMessage.prototype.getTarget = function() {
  return /** @type {!proto.point.PointMachineStateMessage.Target} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.point.PointMachineStateMessage.Target} value
 * @return {!proto.point.PointMachineStateMessage} returns this
 */
proto.point.PointMachineStateMessage.prototype.setTarget = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional AbilityToMove abilityToMove = 3;
 * @return {!proto.point.PointMachineStateMessage.AbilityToMove}
 */
proto.point.PointMachineStateMessage.prototype.getAbilitytomove = function() {
  return /** @type {!proto.point.PointMachineStateMessage.AbilityToMove} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.point.PointMachineStateMessage.AbilityToMove} value
 * @return {!proto.point.PointMachineStateMessage} returns this
 */
proto.point.PointMachineStateMessage.prototype.setAbilitytomove = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional LastPointPosition lastPointPosition = 4;
 * @return {!proto.point.PointMachineStateMessage.LastPointPosition}
 */
proto.point.PointMachineStateMessage.prototype.getLastpointposition = function() {
  return /** @type {!proto.point.PointMachineStateMessage.LastPointPosition} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.point.PointMachineStateMessage.LastPointPosition} value
 * @return {!proto.point.PointMachineStateMessage} returns this
 */
proto.point.PointMachineStateMessage.prototype.setLastpointposition = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional Crucial crucial = 5;
 * @return {!proto.point.PointMachineStateMessage.Crucial}
 */
proto.point.PointMachineStateMessage.prototype.getCrucial = function() {
  return /** @type {!proto.point.PointMachineStateMessage.Crucial} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.point.PointMachineStateMessage.Crucial} value
 * @return {!proto.point.PointMachineStateMessage} returns this
 */
proto.point.PointMachineStateMessage.prototype.setCrucial = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.point.PointPosition = {
  RIGHT: 0,
  LEFT: 1,
  NOENDPOSITION: 2,
  UNINTENDEDPOSITION: 3
};

/**
 * @enum {number}
 */
proto.point.PointDegradedPosition = {
  DEGRADEDRIGHT: 0,
  DEGRADEDLEFT: 1,
  NOTDEGRADED: 2,
  NOTAPPLICABLE: 3
};

/**
 * @enum {number}
 */
proto.point.PreventedPosition = {
  NONE: 0,
  PREVENTEDLEFT: 1,
  PREVENTEDRIGHT: 2,
  PREVENTTRAILED: 3
};

/**
 * @enum {number}
 */
proto.point.AbilityToMove = {
  UNDEFINED: 0,
  ABLE_TO_MOVE: 1,
  UNABLE_TO_MOVE: 2
};

goog.object.extend(exports, proto.point);
